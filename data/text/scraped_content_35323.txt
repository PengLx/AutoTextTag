
Title: Idea 1 Content: Within the field of data science, it is common to be required to use a selection of tools, each specific to their job. A role requiring visualisation using a web interface, but processing of a Python script, it is often better to build a bespoke visualisation in d3 or THREE.js to display it and then fetch data as required. This article covers the creation of a simple flask app that can serve data to a web interface using the Fetch API.
Title: Idea 2 Content: Here we start by importing the required functions, the app structure and the run command to start the app.Having defined our flask app, we now need to create a template webpage. This can be done by placing the file index.html within the templates directory.
Title: Idea 3 Content: When it comes to transferring data we rely on the GET and POST functions within the fetch API. These terms are pretty self-explanatory:POST refers to the sending of information to a location, similar to sending a letter.GET refers to the retrieval of data — you know you have mail, so you go to the post office to collect (ask for) it.
Title: Idea 4 Content: This is useful if we have constantly updating data, a large (high resource) dataset, or sensitive data we can not provide to the client directly.Accompanying sample code used within this article can be found at: 
Title: Idea 5 Content: After adding the following code before the app.run() command, and executing it, we can then visit https://127.0.0.1:5000/ test — which should produce the following result:Now we have set up the server-side of things, we can use fetch command to retrieve the data from it. To do this we can use the fetch promise as follows: